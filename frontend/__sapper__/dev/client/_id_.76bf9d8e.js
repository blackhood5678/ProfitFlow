import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_each_argument, v as validate_slots, o as onMount, l as space, e as element, t as text, m as head_selector, f as detach_dev, p as claim_space, c as claim_element, a as children, b as claim_text, g as add_location, q as attr_dev, C as set_style, L as add_render_callback, h as insert_hydration_dev, j as append_hydration_dev, P as select_option, w as listen_dev, z as set_data_dev, n as noop, x as destroy_each, y as run_all, Q as select_value, K as empty, F as prop_dev } from './client.38617a5e.js';

/* src\routes\admin\customers\[id].svelte generated by Svelte v3.55.1 */
const file = "src\\routes\\admin\\customers\\[id].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (163:8) {:else}
function create_else_block(ctx) {
	let td;
	let i;

	const block = {
		c: function create() {
			td = element("td");
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			i = claim_element(td_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-circle svelte-16wadjs");
			add_location(i, file, 163, 35, 3870);
			attr_dev(td, "class", "status center svelte-16wadjs");
			add_location(td, file, 163, 9, 3844);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, td, anchor);
			append_hydration_dev(td, i);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(163:8) {:else}",
		ctx
	});

	return block;
}

// (161:8) {#if item.status == 'Ok'}
function create_if_block_1(ctx) {
	let td;
	let i;

	const block = {
		c: function create() {
			td = element("td");
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			i = claim_element(td_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-circle green svelte-16wadjs");
			add_location(i, file, 161, 35, 3776);
			attr_dev(td, "class", "status center svelte-16wadjs");
			add_location(td, file, 161, 9, 3750);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, td, anchor);
			append_hydration_dev(td, i);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(161:8) {#if item.status == 'Ok'}",
		ctx
	});

	return block;
}

// (153:6) {#each posts as item}
function create_each_block_1(ctx) {
	let tr;
	let td0;
	let a0;
	let t0_value = (!!/*item*/ ctx[10].name ? /*item*/ ctx[10].name : '') + "";
	let t0;
	let t1;

	let t2_value = (!!/*item*/ ctx[10].serial_number
	? /*item*/ ctx[10].serial_number
	: '') + "";

	let t2;
	let t3;
	let a0_href_value;
	let t4;
	let td1;

	let t5_value = (!!/*item*/ ctx[10].expected_throughput
	? /*item*/ ctx[10].expected_throughput
	: '') + "";

	let t5;
	let t6;
	let td2;
	let t7_value = (!!/*item*/ ctx[10].vendor ? /*item*/ ctx[10].vendor : '') + "";
	let t7;
	let t8;
	let t9;
	let td3;
	let a1;
	let t10;
	let a1_href_value;
	let t11;
	let td4;
	let a2;
	let t12;
	let a2_href_value;
	let t13;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[5](/*item*/ ctx[10]);
	}

	function select_block_type(ctx, dirty) {
		if (/*item*/ ctx[10].status == 'Ok') return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	function click_handler_1() {
		return /*click_handler_1*/ ctx[6](/*item*/ ctx[10]);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[7](/*item*/ ctx[10]);
	}

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			a0 = element("a");
			t0 = text(t0_value);
			t1 = text("[");
			t2 = text(t2_value);
			t3 = text("]");
			t4 = space();
			td1 = element("td");
			t5 = text(t5_value);
			t6 = space();
			td2 = element("td");
			t7 = text(t7_value);
			t8 = space();
			if_block.c();
			t9 = space();
			td3 = element("td");
			a1 = element("a");
			t10 = text("View");
			t11 = space();
			td4 = element("td");
			a2 = element("a");
			t12 = text("View");
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			a0 = claim_element(td0_nodes, "A", { href: true, target: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, t0_value);
			t1 = claim_text(a0_nodes, "[");
			t2 = claim_text(a0_nodes, t2_value);
			t3 = claim_text(a0_nodes, "]");
			a0_nodes.forEach(detach_dev);
			td0_nodes.forEach(detach_dev);
			t4 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", {});
			var td1_nodes = children(td1);
			t5 = claim_text(td1_nodes, t5_value);
			td1_nodes.forEach(detach_dev);
			t6 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", {});
			var td2_nodes = children(td2);
			t7 = claim_text(td2_nodes, t7_value);
			td2_nodes.forEach(detach_dev);
			t8 = claim_space(tr_nodes);
			if_block.l(tr_nodes);
			t9 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			a1 = claim_element(td3_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t10 = claim_text(a1_nodes, "View");
			a1_nodes.forEach(detach_dev);
			td3_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			a2 = claim_element(td4_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t12 = claim_text(a2_nodes, "View");
			a2_nodes.forEach(detach_dev);
			td4_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", a0_href_value = "/converter/" + /*item*/ ctx[10].id);
			attr_dev(a0, "target", "_blank");
			attr_dev(a0, "class", "svelte-16wadjs");
			add_location(a0, file, 154, 12, 3365);
			attr_dev(td0, "class", "svelte-16wadjs");
			add_location(td0, file, 154, 8, 3361);
			add_location(td1, file, 157, 8, 3580);
			add_location(td2, file, 158, 8, 3659);
			attr_dev(a1, "href", a1_href_value = "/tickets/" + /*item*/ ctx[10].id);
			attr_dev(a1, "class", "svelte-16wadjs");
			add_location(a1, file, 165, 27, 3948);
			attr_dev(td3, "class", "center svelte-16wadjs");
			add_location(td3, file, 165, 8, 3929);
			attr_dev(a2, "href", a2_href_value = "/history/" + /*item*/ ctx[10].id);
			attr_dev(a2, "class", "svelte-16wadjs");
			add_location(a2, file, 166, 27, 4067);
			attr_dev(td4, "class", "center svelte-16wadjs");
			add_location(td4, file, 166, 8, 4048);
			add_location(tr, file, 153, 7, 3347);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, tr, anchor);
			append_hydration_dev(tr, td0);
			append_hydration_dev(td0, a0);
			append_hydration_dev(a0, t0);
			append_hydration_dev(a0, t1);
			append_hydration_dev(a0, t2);
			append_hydration_dev(a0, t3);
			append_hydration_dev(tr, t4);
			append_hydration_dev(tr, td1);
			append_hydration_dev(td1, t5);
			append_hydration_dev(tr, t6);
			append_hydration_dev(tr, td2);
			append_hydration_dev(td2, t7);
			append_hydration_dev(tr, t8);
			if_block.m(tr, null);
			append_hydration_dev(tr, t9);
			append_hydration_dev(tr, td3);
			append_hydration_dev(td3, a1);
			append_hydration_dev(a1, t10);
			append_hydration_dev(tr, t11);
			append_hydration_dev(tr, td4);
			append_hydration_dev(td4, a2);
			append_hydration_dev(a2, t12);
			append_hydration_dev(tr, t13);

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", click_handler, false, false, false),
					listen_dev(a1, "click", click_handler_1, false, false, false),
					listen_dev(a2, "click", click_handler_2, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*posts*/ 1 && t0_value !== (t0_value = (!!/*item*/ ctx[10].name ? /*item*/ ctx[10].name : '') + "")) set_data_dev(t0, t0_value);

			if (dirty & /*posts*/ 1 && t2_value !== (t2_value = (!!/*item*/ ctx[10].serial_number
			? /*item*/ ctx[10].serial_number
			: '') + "")) set_data_dev(t2, t2_value);

			if (dirty & /*posts*/ 1 && a0_href_value !== (a0_href_value = "/converter/" + /*item*/ ctx[10].id)) {
				attr_dev(a0, "href", a0_href_value);
			}

			if (dirty & /*posts*/ 1 && t5_value !== (t5_value = (!!/*item*/ ctx[10].expected_throughput
			? /*item*/ ctx[10].expected_throughput
			: '') + "")) set_data_dev(t5, t5_value);

			if (dirty & /*posts*/ 1 && t7_value !== (t7_value = (!!/*item*/ ctx[10].vendor ? /*item*/ ctx[10].vendor : '') + "")) set_data_dev(t7, t7_value);

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(tr, t9);
				}
			}

			if (dirty & /*posts*/ 1 && a1_href_value !== (a1_href_value = "/tickets/" + /*item*/ ctx[10].id)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (dirty & /*posts*/ 1 && a2_href_value !== (a2_href_value = "/history/" + /*item*/ ctx[10].id)) {
				attr_dev(a2, "href", a2_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(153:6) {#each posts as item}",
		ctx
	});

	return block;
}

// (194:6) {#if converters}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = /*converters*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*converters*/ 2) {
				each_value = /*converters*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(194:6) {#if converters}",
		ctx
	});

	return block;
}

// (195:7) {#each converters as item}
function create_each_block(ctx) {
	let option;
	let t0_value = (!!/*item*/ ctx[10].name ? /*item*/ ctx[10].name : '') + "";
	let t0;
	let t1;

	let t2_value = (!!/*item*/ ctx[10].serial_number
	? /*item*/ ctx[10].serial_number
	: '') + "";

	let t2;
	let t3;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t0 = text(t0_value);
			t1 = text("[");
			t2 = text(t2_value);
			t3 = text("]");
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", {});
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_text(option_nodes, "[");
			t2 = claim_text(option_nodes, t2_value);
			t3 = claim_text(option_nodes, "]");
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*item*/ ctx[10].id;
			option.value = option.__value;
			add_location(option, file, 195, 8, 4843);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, option, anchor);
			append_hydration_dev(option, t0);
			append_hydration_dev(option, t1);
			append_hydration_dev(option, t2);
			append_hydration_dev(option, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*converters*/ 2 && t0_value !== (t0_value = (!!/*item*/ ctx[10].name ? /*item*/ ctx[10].name : '') + "")) set_data_dev(t0, t0_value);

			if (dirty & /*converters*/ 2 && t2_value !== (t2_value = (!!/*item*/ ctx[10].serial_number
			? /*item*/ ctx[10].serial_number
			: '') + "")) set_data_dev(t2, t2_value);

			if (dirty & /*converters*/ 2 && option_value_value !== (option_value_value = /*item*/ ctx[10].id)) {
				prop_dev(option, "__value", option_value_value);
				option.value = option.__value;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(195:7) {#each converters as item}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div7;
	let div3;
	let div0;
	let h2;
	let t1;
	let t2;
	let div1;
	let t3;
	let div2;
	let button0;
	let t4;
	let t5;
	let div6;
	let div5;
	let div4;
	let table;
	let thead;
	let tr;
	let th0;
	let t6;
	let t7;
	let th1;
	let t8;
	let t9;
	let th2;
	let t10;
	let t11;
	let th3;
	let t12;
	let t13;
	let th4;
	let t14;
	let t15;
	let th5;
	let t16;
	let t17;
	let tbody;
	let t18;
	let div14;
	let div13;
	let div12;
	let div8;
	let h4;
	let t19;
	let t20;
	let button1;
	let t21;
	let div10;
	let div9;
	let label;
	let t22;
	let t23;
	let select;
	let t24;
	let div11;
	let button2;
	let t25;
	let t26;
	let button3;
	let t27;
	let mounted;
	let dispose;
	let each_value_1 = /*posts*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block = /*converters*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			div7 = element("div");
			div3 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t1 = text(/*currentCustomerName*/ ctx[3]);
			t2 = space();
			div1 = element("div");
			t3 = space();
			div2 = element("div");
			button0 = element("button");
			t4 = text("Assign Converter");
			t5 = space();
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th0 = element("th");
			t6 = text("Name");
			t7 = space();
			th1 = element("th");
			t8 = text("Expected Throughput");
			t9 = space();
			th2 = element("th");
			t10 = text("Vendor");
			t11 = space();
			th3 = element("th");
			t12 = text("Active");
			t13 = space();
			th4 = element("th");
			t14 = text("Tickets");
			t15 = space();
			th5 = element("th");
			t16 = text("Logs");
			t17 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t18 = space();
			div14 = element("div");
			div13 = element("div");
			div12 = element("div");
			div8 = element("div");
			h4 = element("h4");
			t19 = text("Assign Converter");
			t20 = space();
			button1 = element("button");
			t21 = space();
			div10 = element("div");
			div9 = element("div");
			label = element("label");
			t22 = text("Converters:");
			t23 = space();
			select = element("select");
			if (if_block) if_block.c();
			t24 = space();
			div11 = element("div");
			button2 = element("button");
			t25 = text("Assign");
			t26 = space();
			button3 = element("button");
			t27 = text("Cancel");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = head_selector('svelte-1nqrlpn', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div3 = claim_element(div7_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, /*currentCustomerName*/ ctx[3]);
			h2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { style: true, class: true });
			children(div1).forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			button0 = claim_element(div2_nodes, "BUTTON", {
				class: true,
				"data-bs-toggle": true,
				"data-bs-target": true,
				id: true
			});

			var button0_nodes = children(button0);
			t4 = claim_text(button0_nodes, "Assign Converter");
			button0_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t5 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			table = claim_element(div4_nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			thead = claim_element(table_nodes, "THEAD", {});
			var thead_nodes = children(thead);
			tr = claim_element(thead_nodes, "TR", {});
			var tr_nodes = children(tr);
			th0 = claim_element(tr_nodes, "TH", {});
			var th0_nodes = children(th0);
			t6 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			th1 = claim_element(tr_nodes, "TH", {});
			var th1_nodes = children(th1);
			t8 = claim_text(th1_nodes, "Expected Throughput");
			th1_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			th2 = claim_element(tr_nodes, "TH", {});
			var th2_nodes = children(th2);
			t10 = claim_text(th2_nodes, "Vendor");
			th2_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			th3 = claim_element(tr_nodes, "TH", { class: true });
			var th3_nodes = children(th3);
			t12 = claim_text(th3_nodes, "Active");
			th3_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			th4 = claim_element(tr_nodes, "TH", { class: true });
			var th4_nodes = children(th4);
			t14 = claim_text(th4_nodes, "Tickets");
			th4_nodes.forEach(detach_dev);
			t15 = claim_space(tr_nodes);
			th5 = claim_element(tr_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t16 = claim_text(th5_nodes, "Logs");
			th5_nodes.forEach(detach_dev);
			tr_nodes.forEach(detach_dev);
			thead_nodes.forEach(detach_dev);
			t17 = claim_space(table_nodes);
			tbody = claim_element(table_nodes, "TBODY", {});
			var tbody_nodes = children(tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			tbody_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			t18 = claim_space(nodes);
			div14 = claim_element(nodes, "DIV", { class: true, id: true });
			var div14_nodes = children(div14);
			div13 = claim_element(div14_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			div12 = claim_element(div13_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			div8 = claim_element(div12_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			h4 = claim_element(div8_nodes, "H4", { class: true });
			var h4_nodes = children(h4);
			t19 = claim_text(h4_nodes, "Assign Converter");
			h4_nodes.forEach(detach_dev);
			t20 = claim_space(div8_nodes);

			button1 = claim_element(div8_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-bs-dismiss": true
			});

			children(button1).forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t21 = claim_space(div12_nodes);
			div10 = claim_element(div12_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			label = claim_element(div9_nodes, "LABEL", { class: true });
			var label_nodes = children(label);
			t22 = claim_text(label_nodes, "Converters:");
			label_nodes.forEach(detach_dev);
			t23 = claim_space(div9_nodes);
			select = claim_element(div9_nodes, "SELECT", { class: true });
			var select_nodes = children(select);
			if (if_block) if_block.l(select_nodes);
			select_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			div10_nodes.forEach(detach_dev);
			t24 = claim_space(div12_nodes);
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			button2 = claim_element(div11_nodes, "BUTTON", { type: true, class: true });
			var button2_nodes = children(button2);
			t25 = claim_text(button2_nodes, "Assign");
			button2_nodes.forEach(detach_dev);
			t26 = claim_space(div11_nodes);

			button3 = claim_element(div11_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-bs-dismiss": true
			});

			var button3_nodes = children(button3);
			t27 = claim_text(button3_nodes, "Cancel");
			button3_nodes.forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			div12_nodes.forEach(detach_dev);
			div13_nodes.forEach(detach_dev);
			div14_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Converters | ProfitFLow";
			add_location(h2, file, 125, 3, 2651);
			attr_dev(div0, "class", "svelte-16wadjs");
			add_location(div0, file, 124, 2, 2641);
			set_style(div1, "flex-grow", "1");
			attr_dev(div1, "class", "svelte-16wadjs");
			add_location(div1, file, 128, 2, 2697);
			attr_dev(button0, "class", "btn btn-outline-primary");
			attr_dev(button0, "data-bs-toggle", "modal");
			attr_dev(button0, "data-bs-target", "#assignModal");
			attr_dev(button0, "id", "btn-modal");
			add_location(button0, file, 131, 3, 2763);
			attr_dev(div2, "class", "add-user svelte-16wadjs");
			add_location(div2, file, 130, 2, 2736);
			attr_dev(div3, "class", "search-bar container svelte-16wadjs");
			add_location(div3, file, 123, 1, 2603);
			add_location(th0, file, 143, 6, 3083);
			add_location(th1, file, 144, 6, 3104);
			add_location(th2, file, 145, 6, 3140);
			attr_dev(th3, "class", "center svelte-16wadjs");
			add_location(th3, file, 146, 6, 3163);
			attr_dev(th4, "class", "center svelte-16wadjs");
			add_location(th4, file, 147, 6, 3201);
			attr_dev(th5, "class", "center svelte-16wadjs");
			add_location(th5, file, 148, 6, 3240);
			add_location(tr, file, 142, 5, 3071);
			add_location(thead, file, 141, 5, 3057);
			add_location(tbody, file, 151, 5, 3302);
			attr_dev(table, "class", "table");
			add_location(table, file, 140, 4, 3029);
			attr_dev(div4, "class", "col-md-12 converter-list");
			add_location(div4, file, 139, 3, 2985);
			attr_dev(div5, "class", "row");
			add_location(div5, file, 138, 2, 2963);
			attr_dev(div6, "class", "container page svelte-16wadjs");
			add_location(div6, file, 137, 1, 2931);
			attr_dev(div7, "class", "home-page svelte-16wadjs");
			add_location(div7, file, 122, 0, 2577);
			attr_dev(h4, "class", "modal-title");
			add_location(h4, file, 183, 4, 4443);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn-close");
			attr_dev(button1, "data-bs-dismiss", "modal");
			add_location(button1, file, 184, 4, 4494);
			attr_dev(div8, "class", "modal-header");
			add_location(div8, file, 182, 3, 4411);
			attr_dev(label, "class", "form-label");
			add_location(label, file, 190, 5, 4660);
			attr_dev(select, "class", "form-select");
			if (/*selectedConverter*/ ctx[2] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[8].call(select));
			add_location(select, file, 192, 5, 4715);
			attr_dev(div9, "class", "");
			add_location(div9, file, 189, 4, 4639);
			attr_dev(div10, "class", "modal-body");
			add_location(div10, file, 188, 3, 4609);
			attr_dev(button2, "type", "button");
			attr_dev(button2, "class", "btn btn-primary");
			add_location(button2, file, 204, 4, 5091);
			attr_dev(button3, "type", "button");
			attr_dev(button3, "class", "btn btn-danger");
			attr_dev(button3, "data-bs-dismiss", "modal");
			add_location(button3, file, 205, 4, 5185);
			attr_dev(div11, "class", "modal-footer");
			add_location(div11, file, 203, 3, 5059);
			attr_dev(div12, "class", "modal-content");
			add_location(div12, file, 179, 2, 4351);
			attr_dev(div13, "class", "modal-dialog");
			add_location(div13, file, 178, 1, 4321);
			attr_dev(div14, "class", "modal fade");
			attr_dev(div14, "id", "assignModal");
			add_location(div14, file, 177, 0, 4277);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div7, anchor);
			append_hydration_dev(div7, div3);
			append_hydration_dev(div3, div0);
			append_hydration_dev(div0, h2);
			append_hydration_dev(h2, t1);
			append_hydration_dev(div3, t2);
			append_hydration_dev(div3, div1);
			append_hydration_dev(div3, t3);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, button0);
			append_hydration_dev(button0, t4);
			append_hydration_dev(div7, t5);
			append_hydration_dev(div7, div6);
			append_hydration_dev(div6, div5);
			append_hydration_dev(div5, div4);
			append_hydration_dev(div4, table);
			append_hydration_dev(table, thead);
			append_hydration_dev(thead, tr);
			append_hydration_dev(tr, th0);
			append_hydration_dev(th0, t6);
			append_hydration_dev(tr, t7);
			append_hydration_dev(tr, th1);
			append_hydration_dev(th1, t8);
			append_hydration_dev(tr, t9);
			append_hydration_dev(tr, th2);
			append_hydration_dev(th2, t10);
			append_hydration_dev(tr, t11);
			append_hydration_dev(tr, th3);
			append_hydration_dev(th3, t12);
			append_hydration_dev(tr, t13);
			append_hydration_dev(tr, th4);
			append_hydration_dev(th4, t14);
			append_hydration_dev(tr, t15);
			append_hydration_dev(tr, th5);
			append_hydration_dev(th5, t16);
			append_hydration_dev(table, t17);
			append_hydration_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			insert_hydration_dev(target, t18, anchor);
			insert_hydration_dev(target, div14, anchor);
			append_hydration_dev(div14, div13);
			append_hydration_dev(div13, div12);
			append_hydration_dev(div12, div8);
			append_hydration_dev(div8, h4);
			append_hydration_dev(h4, t19);
			append_hydration_dev(div8, t20);
			append_hydration_dev(div8, button1);
			append_hydration_dev(div12, t21);
			append_hydration_dev(div12, div10);
			append_hydration_dev(div10, div9);
			append_hydration_dev(div9, label);
			append_hydration_dev(label, t22);
			append_hydration_dev(div9, t23);
			append_hydration_dev(div9, select);
			if (if_block) if_block.m(select, null);
			select_option(select, /*selectedConverter*/ ctx[2]);
			append_hydration_dev(div12, t24);
			append_hydration_dev(div12, div11);
			append_hydration_dev(div11, button2);
			append_hydration_dev(button2, t25);
			append_hydration_dev(div11, t26);
			append_hydration_dev(div11, button3);
			append_hydration_dev(button3, t27);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", /*select_change_handler*/ ctx[8]),
					listen_dev(button2, "click", /*assignConverter*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*currentCustomerName*/ 8) set_data_dev(t1, /*currentCustomerName*/ ctx[3]);

			if (dirty & /*posts, setCurrentConverter*/ 1) {
				each_value_1 = /*posts*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (/*converters*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(select, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*selectedConverter, converters*/ 6) {
				select_option(select, /*selectedConverter*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div7);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(div14);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	// the `slug` parameter is available because
	// this file is called [slug].svelte
	const res = await this.fetch(`/admin/customers/${page.params.id}.json`);

	const data = await res.json();
	const res1 = await this.fetch(`/admin/customers/all-converters.json`);
	const data1 = await res1.json();

	if (res.status === 200) {
		return { posts: data, converters: data1 };
	} else {
		this.error(res.status, data.message);
	}
}

function setCurrentConverter(name) {
	localStorage.setItem('currentConverter', name);
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Bidu5D', slots, []);
	let { posts } = $$props;
	let { converters } = $$props;
	let selectedConverter = 0;
	let errors = [];
	let currentCustomerName = '';

	onMount(() => {
		$$invalidate(3, currentCustomerName = localStorage.getItem('currentCustomerName'));
	});

	async function assignConverter() {
		if (selectedConverter) {
			let currentCustomerId = localStorage.getItem('currentCustomerId');

			const response = await fetch("/converter/" + selectedConverter + ".json", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
					Accept: "application/json"
				},
				body: JSON.stringify({ user_id: currentCustomerId })
			});

			const parsed = await response.json();

			if (parsed.error) {
				if (parsed.error.errors) {
					errors = parsed.error.errors;
				} else {
					errors = [{ msg: parsed.error.error }];
				}
			} else {
				location.reload();
			}
		}

		// Hide Modal
		let modal = new bootstrap.Modal('#assignModal');

		modal.hide();
	}

	$$self.$$.on_mount.push(function () {
		if (posts === undefined && !('posts' in $$props || $$self.$$.bound[$$self.$$.props['posts']])) {
			console.warn("<U5Bidu5D> was created without expected prop 'posts'");
		}

		if (converters === undefined && !('converters' in $$props || $$self.$$.bound[$$self.$$.props['converters']])) {
			console.warn("<U5Bidu5D> was created without expected prop 'converters'");
		}
	});

	const writable_props = ['posts', 'converters'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
	});

	const click_handler = item => setCurrentConverter(item.name);
	const click_handler_1 = item => setCurrentConverter(item.name);
	const click_handler_2 = item => setCurrentConverter(item.name);

	function select_change_handler() {
		selectedConverter = select_value(this);
		$$invalidate(2, selectedConverter);
		$$invalidate(1, converters);
	}

	$$self.$$set = $$props => {
		if ('posts' in $$props) $$invalidate(0, posts = $$props.posts);
		if ('converters' in $$props) $$invalidate(1, converters = $$props.converters);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		posts,
		converters,
		selectedConverter,
		errors,
		currentCustomerName,
		setCurrentConverter,
		assignConverter
	});

	$$self.$inject_state = $$props => {
		if ('posts' in $$props) $$invalidate(0, posts = $$props.posts);
		if ('converters' in $$props) $$invalidate(1, converters = $$props.converters);
		if ('selectedConverter' in $$props) $$invalidate(2, selectedConverter = $$props.selectedConverter);
		if ('errors' in $$props) errors = $$props.errors;
		if ('currentCustomerName' in $$props) $$invalidate(3, currentCustomerName = $$props.currentCustomerName);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		posts,
		converters,
		selectedConverter,
		currentCustomerName,
		assignConverter,
		click_handler,
		click_handler_1,
		click_handler_2,
		select_change_handler
	];
}

class U5Bidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0, converters: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bidu5D",
			options,
			id: create_fragment.name
		});
	}

	get posts() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get converters() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set converters(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { U5Bidu5D as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
