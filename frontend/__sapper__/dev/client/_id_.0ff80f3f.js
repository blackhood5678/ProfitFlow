import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, l as space, e as element, t as text, m as head_selector, f as detach_dev, p as claim_space, c as claim_element, a as children, b as claim_text, r as src_url_equal, q as attr_dev, g as add_location, h as insert_hydration_dev, j as append_hydration_dev, z as set_data_dev, n as noop } from './client.38617a5e.js';

/* src\routes\converter\[id].svelte generated by Svelte v3.55.1 */

const file = "src\\routes\\converter\\[id].svelte";

function create_fragment(ctx) {
	let t0;
	let div4;
	let div3;
	let div0;
	let img;
	let img_src_value;
	let t1;
	let div2;
	let h1;
	let t2_value = /*post*/ ctx[0].name + "";
	let t2;
	let t3;
	let div1;
	let raw_value = /*post*/ ctx[0].description + "";

	const block = {
		c: function create() {
			t0 = space();
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			img = element("img");
			t1 = space();
			div2 = element("div");
			h1 = element("h1");
			t2 = text(t2_value);
			t3 = space();
			div1 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = head_selector('svelte-xuallm', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			img = claim_element(div0_nodes, "IMG", { src: true, alt: true, class: true });
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h1 = claim_element(div2_nodes, "H1", {});
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, t2_value);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Converter | ProfitFlow";
			if (!src_url_equal(img.src, img_src_value = "/converter.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Converter Image");
			attr_dev(img, "class", "svelte-zqivt3");
			add_location(img, file, 32, 3, 756);
			attr_dev(div0, "class", "photo col-4");
			add_location(div0, file, 31, 2, 726);
			add_location(h1, file, 35, 3, 854);
			add_location(div1, file, 37, 3, 881);
			attr_dev(div2, "class", "description col-8 svelte-zqivt3");
			add_location(div2, file, 34, 2, 818);
			attr_dev(div3, "class", "row");
			add_location(div3, file, 30, 1, 705);
			attr_dev(div4, "class", "container converter-page svelte-zqivt3");
			add_location(div4, file, 29, 0, 664);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div4, anchor);
			append_hydration_dev(div4, div3);
			append_hydration_dev(div3, div0);
			append_hydration_dev(div0, img);
			append_hydration_dev(div3, t1);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, h1);
			append_hydration_dev(h1, t2);
			append_hydration_dev(div2, t3);
			append_hydration_dev(div2, div1);
			div1.innerHTML = raw_value;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*post*/ 1 && t2_value !== (t2_value = /*post*/ ctx[0].name + "")) set_data_dev(t2, t2_value);
			if (dirty & /*post*/ 1 && raw_value !== (raw_value = /*post*/ ctx[0].description + "")) div1.innerHTML = raw_value;		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	// the `slug` parameter is available because
	// this file is called [slug].svelte
	const res = await this.fetch(`converter/${params.id}.json`);

	const data = await res.json();

	if (res.status === 200) {
		return { post: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Bidu5D', slots, []);
	let { post } = $$props;

	$$self.$$.on_mount.push(function () {
		if (post === undefined && !('post' in $$props || $$self.$$.bound[$$self.$$.props['post']])) {
			console.warn("<U5Bidu5D> was created without expected prop 'post'");
		}
	});

	const writable_props = ['post'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('post' in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => ({ preload, post });

	$$self.$inject_state = $$props => {
		if ('post' in $$props) $$invalidate(0, post = $$props.post);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [post];
}

class U5Bidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bidu5D",
			options,
			id: create_fragment.name
		});
	}

	get post() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { U5Bidu5D as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2lkXy4wZmY4MGYzZi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9jb252ZXJ0ZXIvW2lkXS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XHJcblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMgfSkge1xyXG5cdFx0Ly8gdGhlIGBzbHVnYCBwYXJhbWV0ZXIgaXMgYXZhaWxhYmxlIGJlY2F1c2VcclxuXHRcdC8vIHRoaXMgZmlsZSBpcyBjYWxsZWQgW3NsdWddLnN2ZWx0ZVxyXG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChgY29udmVydGVyLyR7cGFyYW1zLmlkfS5qc29uYCk7XHJcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcclxuXHJcblx0XHRpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XHJcblx0XHRcdHJldHVybiB7IHBvc3Q6IGRhdGEgfTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZXJyb3IocmVzLnN0YXR1cywgZGF0YS5tZXNzYWdlKTtcclxuXHRcdH1cclxuXHR9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHNjcmlwdD5cclxuXHRleHBvcnQgbGV0IHBvc3Q7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG5cdC5jb252ZXJ0ZXItcGFnZXtwYWRkaW5nOiA0MHB4IDEwMHB4O31cclxuXHQuY29udmVydGVyLXBhZ2UgLnBob3RvIGltZ3t3aWR0aDogMTAwJTt9XHJcblx0LmNvbnZlcnRlci1wYWdlIC5kZXNjcmlwdGlvbntwYWRkaW5nLWxlZnQ6IDQwcHg7fVxyXG48L3N0eWxlPlxyXG5cclxuPHN2ZWx0ZTpoZWFkPlxyXG5cdDx0aXRsZT5Db252ZXJ0ZXIgfCBQcm9maXRGbG93PC90aXRsZT5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxkaXYgY2xhc3M9XCJjb250YWluZXIgY29udmVydGVyLXBhZ2VcIj5cclxuXHQ8ZGl2IGNsYXNzPVwicm93XCI+XHJcblx0XHQ8ZGl2IGNsYXNzPVwicGhvdG8gY29sLTRcIj5cclxuXHRcdFx0PGltZyBzcmM9XCIvY29udmVydGVyLnBuZ1wiIGFsdD1cIkNvbnZlcnRlciBJbWFnZVwiPlxyXG5cdFx0PC9kaXY+XHJcblx0XHQ8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb24gY29sLThcIj5cclxuXHRcdFx0PGgxPntwb3N0Lm5hbWV9PC9oMT5cclxuXHJcblx0XHRcdDxkaXY+XHJcblx0XHRcdFx0e0BodG1sIHBvc3QuZGVzY3JpcHRpb259XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0PC9kaXY+XHJcblx0PC9kaXY+XHJcbjwvZGl2PlxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQW1DUSxDQUFBLElBQUEsUUFBQSxZQUFBLEdBQUksSUFBQyxJQUFJLEdBQUEsRUFBQSxDQUFBOzs7O0FBR04sQ0FBQSxJQUFBLFNBQUEsWUFBQSxHQUFJLElBQUMsV0FBVyxHQUFBLEVBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQVQzQixvQkFhTSxDQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxDQUFBLENBQUE7R0FaTCxvQkFXTSxDQUFBLElBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTtHQVZMLG9CQUVNLENBQUEsSUFBQSxFQUFBLElBQUEsQ0FBQSxDQUFBO0dBREwsb0JBQWdELENBQUEsSUFBQSxFQUFBLEdBQUEsQ0FBQSxDQUFBOztHQUVqRCxvQkFNTSxDQUFBLElBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTtHQUxMLG9CQUFvQixDQUFBLElBQUEsRUFBQSxFQUFBLENBQUEsQ0FBQTs7O0dBRXBCLG9CQUVNLENBQUEsSUFBQSxFQUFBLElBQUEsQ0FBQSxDQUFBOzs7O0FBSkQsR0FBQSxJQUFBLEtBQUEsWUFBQSxDQUFBLElBQUEsUUFBQSxNQUFBLFFBQUEsWUFBQSxHQUFJLElBQUMsSUFBSSxHQUFBLEVBQUEsQ0FBQSxFQUFBLFlBQUEsQ0FBQSxFQUFBLEVBQUEsUUFBQSxDQUFBLENBQUE7QUFHTixHQUFBLElBQUEsS0FBQSxZQUFBLENBQUEsSUFBQSxTQUFBLE1BQUEsU0FBQSxZQUFBLEdBQUksSUFBQyxXQUFXLEdBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLFNBQUEsR0FBQSxTQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXJDSixlQUFBLE9BQU8sR0FBRyxNQUFNLEVBQUEsRUFBQTs7O0FBRy9CLENBQUEsTUFBQSxHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBYyxDQUFBLFVBQUEsRUFBQSxNQUFNLENBQUMsRUFBRSxDQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUE7O09BQzdDLElBQUksR0FBQSxNQUFTLEdBQUcsQ0FBQyxJQUFJLEVBQUEsQ0FBQTs7S0FFdkIsR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUE7QUFDWixFQUFBLE9BQUEsRUFBQSxJQUFJLEVBQUUsSUFBSSxFQUFBLENBQUE7O0VBRW5CLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFBLENBQUE7Ozs7Ozs7T0FNMUIsSUFBSSxFQUFBLEdBQUEsT0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
