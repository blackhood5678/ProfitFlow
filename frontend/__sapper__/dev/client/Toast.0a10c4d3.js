import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, l as space, c as claim_element, a as children, b as claim_text, f as detach_dev, p as claim_space, q as attr_dev, g as add_location, h as insert_hydration_dev, j as append_hydration_dev, z as set_data_dev, n as noop } from './client.38617a5e.js';

/* src\components\Toast.svelte generated by Svelte v3.55.1 */

const file = "src\\components\\Toast.svelte";

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let strong;
	let t0;
	let t1;
	let small;
	let t2;
	let button;
	let t3;
	let div1;
	let t4;

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			strong = element("strong");
			t0 = text("Toast");
			t1 = space();
			small = element("small");
			t2 = space();
			button = element("button");
			t3 = space();
			div1 = element("div");
			t4 = text(/*toastBody*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			div2 = claim_element(div3_nodes, "DIV", {
				id: true,
				class: true,
				role: true,
				"aria-live": true,
				"aria-atomic": true
			});

			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			strong = claim_element(div0_nodes, "STRONG", { class: true });
			var strong_nodes = children(strong);
			t0 = claim_text(strong_nodes, "Toast");
			strong_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			small = claim_element(div0_nodes, "SMALL", {});
			children(small).forEach(detach_dev);
			t2 = claim_space(div0_nodes);

			button = claim_element(div0_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-bs-dismiss": true,
				"aria-label": true
			});

			children(button).forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t4 = claim_text(div1_nodes, /*toastBody*/ ctx[0]);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(strong, "class", "me-auto");
			add_location(strong, file, 7, 12, 254);
			add_location(small, file, 8, 12, 306);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn-close");
			attr_dev(button, "data-bs-dismiss", "toast");
			attr_dev(button, "aria-label", "Close");
			add_location(button, file, 9, 12, 335);
			attr_dev(div0, "class", "toast-header");
			add_location(div0, file, 6, 8, 214);
			attr_dev(div1, "class", "toast-body");
			add_location(div1, file, 11, 8, 453);
			attr_dev(div2, "id", "liveToast");
			attr_dev(div2, "class", "toast");
			attr_dev(div2, "role", "alert");
			attr_dev(div2, "aria-live", "assertive");
			attr_dev(div2, "aria-atomic", "true");
			add_location(div2, file, 5, 4, 116);
			attr_dev(div3, "class", "toast-container position-fixed top-0 end-0 p-3");
			add_location(div3, file, 4, 0, 50);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div3, anchor);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, div0);
			append_hydration_dev(div0, strong);
			append_hydration_dev(strong, t0);
			append_hydration_dev(div0, t1);
			append_hydration_dev(div0, small);
			append_hydration_dev(div0, t2);
			append_hydration_dev(div0, button);
			append_hydration_dev(div2, t3);
			append_hydration_dev(div2, div1);
			append_hydration_dev(div1, t4);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*toastBody*/ 1) set_data_dev(t4, /*toastBody*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Toast', slots, []);
	let { toastBody } = $$props;

	$$self.$$.on_mount.push(function () {
		if (toastBody === undefined && !('toastBody' in $$props || $$self.$$.bound[$$self.$$.props['toastBody']])) {
			console.warn("<Toast> was created without expected prop 'toastBody'");
		}
	});

	const writable_props = ['toastBody'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Toast> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('toastBody' in $$props) $$invalidate(0, toastBody = $$props.toastBody);
	};

	$$self.$capture_state = () => ({ toastBody });

	$$self.$inject_state = $$props => {
		if ('toastBody' in $$props) $$invalidate(0, toastBody = $$props.toastBody);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [toastBody];
}

class Toast extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { toastBody: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Toast",
			options,
			id: create_fragment.name
		});
	}

	get toastBody() {
		throw new Error("<Toast>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toastBody(value) {
		throw new Error("<Toast>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Toast as T };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9hc3QuMGExMGM0ZDMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RvYXN0LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG4gICAgZXhwb3J0IGxldCB0b2FzdEJvZHk7XHJcbjwvc2NyaXB0PlxyXG5cclxuPGRpdiBjbGFzcz1cInRvYXN0LWNvbnRhaW5lciBwb3NpdGlvbi1maXhlZCB0b3AtMCBlbmQtMCBwLTNcIj5cclxuICAgIDxkaXYgaWQ9XCJsaXZlVG9hc3RcIiBjbGFzcz1cInRvYXN0XCIgcm9sZT1cImFsZXJ0XCIgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCIgYXJpYS1hdG9taWM9XCJ0cnVlXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRvYXN0LWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8c3Ryb25nIGNsYXNzPVwibWUtYXV0b1wiPlRvYXN0PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDxzbWFsbD48L3NtYWxsPlxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1jbG9zZVwiIGRhdGEtYnMtZGlzbWlzcz1cInRvYXN0XCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRvYXN0LWJvZHlcIj5cclxuICAgICAgICAgICAge3RvYXN0Qm9keX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBT29DLE9BQUssQ0FBQSxDQUFBOzs7Ozs7OzJCQUs1QixHQUFTLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBTGMsT0FBSyxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkNBSzVCLEdBQVMsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQVJ0QixvQkFXTSxDQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxDQUFBLENBQUE7R0FWRixvQkFTTSxDQUFBLElBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTtHQVJGLG9CQUlNLENBQUEsSUFBQSxFQUFBLElBQUEsQ0FBQSxDQUFBO0dBSEYsb0JBQXNDLENBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBOzs7R0FDdEMsb0JBQWUsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLENBQUE7O0dBQ2Ysb0JBQTRGLENBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBOztHQUVoRyxvQkFFTSxDQUFBLElBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTs7OzsrREFERCxHQUFTLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FYUCxTQUFTLEVBQUEsR0FBQSxPQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
