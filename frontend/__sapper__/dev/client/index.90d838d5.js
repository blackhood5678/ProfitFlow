import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_each_argument, v as validate_slots, o as onMount, e as element, l as space, t as text, c as claim_element, a as children, p as claim_space, b as claim_text, f as detach_dev, g as add_location, q as attr_dev, L as add_render_callback, h as insert_hydration_dev, j as append_hydration_dev, u as set_input_value, M as select_options, w as listen_dev, E as prevent_default, n as noop, x as destroy_each, y as run_all, N as select_multiple_value, z as set_data_dev, F as prop_dev } from './client.38617a5e.js';

/* src\routes\gadmin\add-company\index.svelte generated by Svelte v3.55.1 */
const file = "src\\routes\\gadmin\\add-company\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (75:4) {#if errors.length > 0}
function create_if_block(ctx) {
	let div;
	let each_value_1 = /*errors*/ ctx[1];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", "error-container");
			attr_dev(div, "class", "text-danger");
			add_location(div, file, 75, 8, 1787);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errors*/ 2) {
				each_value_1 = /*errors*/ ctx[1];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(75:4) {#if errors.length > 0}",
		ctx
	});

	return block;
}

// (77:12) {#each errors as item}
function create_each_block_1(ctx) {
	let div2;
	let div0;
	let i;
	let t0;
	let div1;
	let t1_value = /*item*/ ctx[12].msg + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			i = element("i");
			t0 = space();
			div1 = element("div");
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", {});
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", {});
			var div0_nodes = children(div0);
			i = claim_element(div0_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, t1_value);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-circle");
			add_location(i, file, 78, 25, 1919);
			add_location(div0, file, 78, 20, 1914);
			add_location(div1, file, 79, 20, 1976);
			add_location(div2, file, 77, 16, 1887);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div2, anchor);
			append_hydration_dev(div2, div0);
			append_hydration_dev(div0, i);
			append_hydration_dev(div2, t0);
			append_hydration_dev(div2, div1);
			append_hydration_dev(div1, t1);
			append_hydration_dev(div2, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errors*/ 2 && t1_value !== (t1_value = /*item*/ ctx[12].msg + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(77:12) {#each errors as item}",
		ctx
	});

	return block;
}

// (103:20) {#each converterList as item}
function create_each_block(ctx) {
	let option;
	let t0_value = /*item*/ ctx[12].name + "";
	let t0;
	let t1;
	let t2_value = /*item*/ ctx[12].serial_number + "";
	let t2;
	let t3;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t0 = text(t0_value);
			t1 = text("[");
			t2 = text(t2_value);
			t3 = text("]");
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", {});
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_text(option_nodes, "[");
			t2 = claim_text(option_nodes, t2_value);
			t3 = claim_text(option_nodes, "]");
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*item*/ ctx[12].id;
			option.value = option.__value;
			add_location(option, file, 103, 24, 3041);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, option, anchor);
			append_hydration_dev(option, t0);
			append_hydration_dev(option, t1);
			append_hydration_dev(option, t2);
			append_hydration_dev(option, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*converterList*/ 1 && t0_value !== (t0_value = /*item*/ ctx[12].name + "")) set_data_dev(t0, t0_value);
			if (dirty & /*converterList*/ 1 && t2_value !== (t2_value = /*item*/ ctx[12].serial_number + "")) set_data_dev(t2, t2_value);

			if (dirty & /*converterList*/ 1 && option_value_value !== (option_value_value = /*item*/ ctx[12].id)) {
				prop_dev(option, "__value", option_value_value);
				option.value = option.__value;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(103:20) {#each converterList as item}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div7;
	let t0;
	let div0;
	let h1;
	let t1;
	let t2;
	let div6;
	let form;
	let div1;
	let label0;
	let t3;
	let t4;
	let input0;
	let t5;
	let div2;
	let label1;
	let t6;
	let t7;
	let input1;
	let t8;
	let div3;
	let label2;
	let t9;
	let t10;
	let select;
	let t11;
	let div4;
	let label3;
	let t12;
	let t13;
	let textarea;
	let t14;
	let div5;
	let button;
	let t15;
	let mounted;
	let dispose;
	let if_block = /*errors*/ ctx[1].length > 0 && create_if_block(ctx);
	let each_value = /*converterList*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div7 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div0 = element("div");
			h1 = element("h1");
			t1 = text("Add Company");
			t2 = space();
			div6 = element("div");
			form = element("form");
			div1 = element("div");
			label0 = element("label");
			t3 = text("Company Name:");
			t4 = space();
			input0 = element("input");
			t5 = space();
			div2 = element("div");
			label1 = element("label");
			t6 = text("Administrator:");
			t7 = space();
			input1 = element("input");
			t8 = space();
			div3 = element("div");
			label2 = element("label");
			t9 = text("Converters:");
			t10 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t11 = space();
			div4 = element("div");
			label3 = element("label");
			t12 = text("Additional:");
			t13 = space();
			textarea = element("textarea");
			t14 = space();
			div5 = element("div");
			button = element("button");
			t15 = text("Save");
			this.h();
		},
		l: function claim(nodes) {
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			if (if_block) if_block.l(div7_nodes);
			t0 = claim_space(div7_nodes);
			div0 = claim_element(div7_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Add Company");
			h1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			form = claim_element(div6_nodes, "FORM", { method: true });
			var form_nodes = children(form);
			div1 = claim_element(form_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			label0 = claim_element(div1_nodes, "LABEL", { class: true, for: true });
			var label0_nodes = children(label0);
			t3 = claim_text(label0_nodes, "Company Name:");
			label0_nodes.forEach(detach_dev);
			t4 = claim_space(div1_nodes);

			input0 = claim_element(div1_nodes, "INPUT", {
				type: true,
				id: true,
				name: true,
				class: true
			});

			div1_nodes.forEach(detach_dev);
			t5 = claim_space(form_nodes);
			div2 = claim_element(form_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			label1 = claim_element(div2_nodes, "LABEL", { class: true, for: true });
			var label1_nodes = children(label1);
			t6 = claim_text(label1_nodes, "Administrator:");
			label1_nodes.forEach(detach_dev);
			t7 = claim_space(div2_nodes);

			input1 = claim_element(div2_nodes, "INPUT", {
				type: true,
				id: true,
				name: true,
				class: true
			});

			div2_nodes.forEach(detach_dev);
			t8 = claim_space(form_nodes);
			div3 = claim_element(form_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			label2 = claim_element(div3_nodes, "LABEL", { class: true, for: true });
			var label2_nodes = children(label2);
			t9 = claim_text(label2_nodes, "Converters:");
			label2_nodes.forEach(detach_dev);
			t10 = claim_space(div3_nodes);
			select = claim_element(div3_nodes, "SELECT", { class: true, id: true, name: true });
			var select_nodes = children(select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t11 = claim_space(form_nodes);
			div4 = claim_element(form_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			label3 = claim_element(div4_nodes, "LABEL", { class: true, for: true });
			var label3_nodes = children(label3);
			t12 = claim_text(label3_nodes, "Additional:");
			label3_nodes.forEach(detach_dev);
			t13 = claim_space(div4_nodes);
			textarea = claim_element(div4_nodes, "TEXTAREA", { id: true, rows: true, class: true });
			children(textarea).forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t14 = claim_space(form_nodes);
			div5 = claim_element(form_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			button = claim_element(div5_nodes, "BUTTON", { class: true, type: true });
			var button_nodes = children(button);
			t15 = claim_text(button_nodes, "Save");
			button_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 86, 8, 2106);
			attr_dev(div0, "class", "title svelte-1uq9bbd");
			add_location(div0, file, 85, 4, 2077);
			attr_dev(label0, "class", "form-label");
			attr_dev(label0, "for", "name");
			add_location(label0, file, 92, 16, 2298);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "id", "name");
			attr_dev(input0, "name", "name");
			attr_dev(input0, "class", "form-control");
			input0.required = true;
			add_location(input0, file, 93, 16, 2375);
			attr_dev(div1, "class", "form-group svelte-1uq9bbd");
			add_location(div1, file, 91, 12, 2256);
			attr_dev(label1, "class", "form-label");
			attr_dev(label1, "for", "admin");
			add_location(label1, file, 96, 16, 2540);
			attr_dev(input1, "type", "email");
			attr_dev(input1, "id", "admin");
			attr_dev(input1, "name", "admin");
			attr_dev(input1, "class", "form-control");
			input1.required = true;
			add_location(input1, file, 97, 16, 2619);
			attr_dev(div2, "class", "form-group svelte-1uq9bbd");
			add_location(div2, file, 95, 12, 2498);
			attr_dev(label2, "class", "form-label");
			attr_dev(label2, "for", "converters");
			add_location(label2, file, 100, 16, 2788);
			attr_dev(select, "class", "form-select");
			select.multiple = true;
			attr_dev(select, "id", "converters");
			attr_dev(select, "name", "converters");
			if (/*converters*/ ctx[5] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[10].call(select));
			add_location(select, file, 101, 16, 2869);
			attr_dev(div3, "class", "form-group svelte-1uq9bbd");
			add_location(div3, file, 99, 12, 2746);
			attr_dev(label3, "class", "form-label");
			attr_dev(label3, "for", "additional");
			add_location(label3, file, 108, 16, 3241);
			attr_dev(textarea, "id", "additional");
			attr_dev(textarea, "rows", "4");
			attr_dev(textarea, "class", "form-control svelte-1uq9bbd");
			textarea.required = true;
			add_location(textarea, file, 109, 16, 3322);
			attr_dev(div4, "class", "form-group svelte-1uq9bbd");
			add_location(div4, file, 107, 12, 3199);
			attr_dev(button, "class", "btn btn-primary");
			attr_dev(button, "type", "submit");
			add_location(button, file, 112, 16, 3499);
			attr_dev(div5, "class", "form-group svelte-1uq9bbd");
			add_location(div5, file, 111, 12, 3457);
			attr_dev(form, "method", "post");
			add_location(form, file, 90, 8, 2184);
			attr_dev(div6, "class", "form-container");
			add_location(div6, file, 89, 4, 2146);
			attr_dev(div7, "class", "container add-user svelte-1uq9bbd");
			add_location(div7, file, 72, 0, 1714);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div7, anchor);
			if (if_block) if_block.m(div7, null);
			append_hydration_dev(div7, t0);
			append_hydration_dev(div7, div0);
			append_hydration_dev(div0, h1);
			append_hydration_dev(h1, t1);
			append_hydration_dev(div7, t2);
			append_hydration_dev(div7, div6);
			append_hydration_dev(div6, form);
			append_hydration_dev(form, div1);
			append_hydration_dev(div1, label0);
			append_hydration_dev(label0, t3);
			append_hydration_dev(div1, t4);
			append_hydration_dev(div1, input0);
			set_input_value(input0, /*name*/ ctx[2]);
			append_hydration_dev(form, t5);
			append_hydration_dev(form, div2);
			append_hydration_dev(div2, label1);
			append_hydration_dev(label1, t6);
			append_hydration_dev(div2, t7);
			append_hydration_dev(div2, input1);
			set_input_value(input1, /*admin*/ ctx[3]);
			append_hydration_dev(form, t8);
			append_hydration_dev(form, div3);
			append_hydration_dev(div3, label2);
			append_hydration_dev(label2, t9);
			append_hydration_dev(div3, t10);
			append_hydration_dev(div3, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_options(select, /*converters*/ ctx[5]);
			append_hydration_dev(form, t11);
			append_hydration_dev(form, div4);
			append_hydration_dev(div4, label3);
			append_hydration_dev(label3, t12);
			append_hydration_dev(div4, t13);
			append_hydration_dev(div4, textarea);
			set_input_value(textarea, /*description*/ ctx[4]);
			append_hydration_dev(form, t14);
			append_hydration_dev(form, div5);
			append_hydration_dev(div5, button);
			append_hydration_dev(button, t15);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
					listen_dev(select, "change", /*select_change_handler*/ ctx[10]),
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[11]),
					listen_dev(form, "submit", prevent_default(/*submitForm*/ ctx[6]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*errors*/ ctx[1].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div7, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*name*/ 4 && input0.value !== /*name*/ ctx[2]) {
				set_input_value(input0, /*name*/ ctx[2]);
			}

			if (dirty & /*admin*/ 8 && input1.value !== /*admin*/ ctx[3]) {
				set_input_value(input1, /*admin*/ ctx[3]);
			}

			if (dirty & /*converterList*/ 1) {
				each_value = /*converterList*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*converters, converterList*/ 33) {
				select_options(select, /*converters*/ ctx[5]);
			}

			if (dirty & /*description*/ 16) {
				set_input_value(textarea, /*description*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div7);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const { token, role } = session;
	const res = await this.fetch(`/admin/customers/all-converters.json`);
	const data = await res.json();

	if (token) {
		return { token, converterList: data };
	} else {
		return null;
	}
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Add_company', slots, []);
	let { token } = $$props;
	let { converterList } = $$props;
	let errors = [];
	let name;
	let admin;
	let description;
	let converters = [];

	onMount(() => {
		
	});

	async function submitForm() {
		const response = await fetch("/gadmin/add-company", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Accept: "application/json"
			},
			body: JSON.stringify({
				name,
				admin,
				description,
				converters: converters.join(',')
			})
		});

		const parsed = await response.json();

		if (parsed.error) {
			if (parsed.error.errors) {
				$$invalidate(1, errors = parsed.error.errors);
			} else {
				$$invalidate(1, errors = [{ msg: parsed.error.error }]);
			}
		} else {
			location.href = '/gadmin/companies';
		}
	}

	$$self.$$.on_mount.push(function () {
		if (token === undefined && !('token' in $$props || $$self.$$.bound[$$self.$$.props['token']])) {
			console.warn("<Add_company> was created without expected prop 'token'");
		}

		if (converterList === undefined && !('converterList' in $$props || $$self.$$.bound[$$self.$$.props['converterList']])) {
			console.warn("<Add_company> was created without expected prop 'converterList'");
		}
	});

	const writable_props = ['token', 'converterList'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Add_company> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		name = this.value;
		$$invalidate(2, name);
	}

	function input1_input_handler() {
		admin = this.value;
		$$invalidate(3, admin);
	}

	function select_change_handler() {
		converters = select_multiple_value(this);
		$$invalidate(5, converters);
		$$invalidate(0, converterList);
	}

	function textarea_input_handler() {
		description = this.value;
		$$invalidate(4, description);
	}

	$$self.$$set = $$props => {
		if ('token' in $$props) $$invalidate(7, token = $$props.token);
		if ('converterList' in $$props) $$invalidate(0, converterList = $$props.converterList);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		token,
		converterList,
		errors,
		name,
		admin,
		description,
		converters,
		submitForm
	});

	$$self.$inject_state = $$props => {
		if ('token' in $$props) $$invalidate(7, token = $$props.token);
		if ('converterList' in $$props) $$invalidate(0, converterList = $$props.converterList);
		if ('errors' in $$props) $$invalidate(1, errors = $$props.errors);
		if ('name' in $$props) $$invalidate(2, name = $$props.name);
		if ('admin' in $$props) $$invalidate(3, admin = $$props.admin);
		if ('description' in $$props) $$invalidate(4, description = $$props.description);
		if ('converters' in $$props) $$invalidate(5, converters = $$props.converters);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		converterList,
		errors,
		name,
		admin,
		description,
		converters,
		submitForm,
		token,
		input0_input_handler,
		input1_input_handler,
		select_change_handler,
		textarea_input_handler
	];
}

class Add_company extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { token: 7, converterList: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Add_company",
			options,
			id: create_fragment.name
		});
	}

	get token() {
		throw new Error("<Add_company>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set token(value) {
		throw new Error("<Add_company>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get converterList() {
		throw new Error("<Add_company>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set converterList(value) {
		throw new Error("<Add_company>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Add_company as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
