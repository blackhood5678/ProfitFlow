import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, k as validate_each_argument, v as validate_slots, o as onMount, l as space, e as element, t as text, m as head_selector, f as detach_dev, p as claim_space, c as claim_element, a as children, b as claim_text, g as add_location, q as attr_dev, C as set_style, h as insert_hydration_dev, j as append_hydration_dev, z as set_data_dev, n as noop, x as destroy_each, w as listen_dev, y as run_all } from './client.38617a5e.js';

/* src\routes\gadmin\customers\[id].svelte generated by Svelte v3.55.1 */
const file = "src\\routes\\gadmin\\customers\\[id].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (114:8) {:else}
function create_else_block(ctx) {
	let td;
	let i;

	const block = {
		c: function create() {
			td = element("td");
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			i = claim_element(td_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-circle svelte-16wadjs");
			add_location(i, file, 114, 35, 2742);
			attr_dev(td, "class", "status center svelte-16wadjs");
			add_location(td, file, 114, 9, 2716);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, td, anchor);
			append_hydration_dev(td, i);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(114:8) {:else}",
		ctx
	});

	return block;
}

// (112:8) {#if item.status == 'Ok'}
function create_if_block(ctx) {
	let td;
	let i;

	const block = {
		c: function create() {
			td = element("td");
			i = element("i");
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			i = claim_element(td_nodes, "I", { class: true });
			children(i).forEach(detach_dev);
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i, "class", "fas fa-circle green svelte-16wadjs");
			add_location(i, file, 112, 35, 2648);
			attr_dev(td, "class", "status center svelte-16wadjs");
			add_location(td, file, 112, 9, 2622);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, td, anchor);
			append_hydration_dev(td, i);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(112:8) {#if item.status == 'Ok'}",
		ctx
	});

	return block;
}

// (104:6) {#each posts as item}
function create_each_block(ctx) {
	let tr;
	let td0;
	let a0;
	let t0_value = (!!/*item*/ ctx[7].name ? /*item*/ ctx[7].name : '') + "";
	let t0;
	let t1;

	let t2_value = (!!/*item*/ ctx[7].serial_number
	? /*item*/ ctx[7].serial_number
	: '') + "";

	let t2;
	let t3;
	let a0_href_value;
	let t4;
	let td1;

	let t5_value = (!!/*item*/ ctx[7].expected_throughput
	? /*item*/ ctx[7].expected_throughput
	: '') + "";

	let t5;
	let t6;
	let td2;
	let t7_value = (!!/*item*/ ctx[7].vendor ? /*item*/ ctx[7].vendor : '') + "";
	let t7;
	let t8;
	let t9;
	let td3;
	let a1;
	let t10;
	let a1_href_value;
	let t11;
	let td4;
	let a2;
	let t12;
	let a2_href_value;
	let t13;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*item*/ ctx[7]);
	}

	function select_block_type(ctx, dirty) {
		if (/*item*/ ctx[7].status == 'Ok') return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	function click_handler_1() {
		return /*click_handler_1*/ ctx[3](/*item*/ ctx[7]);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[4](/*item*/ ctx[7]);
	}

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			a0 = element("a");
			t0 = text(t0_value);
			t1 = text("[");
			t2 = text(t2_value);
			t3 = text("]");
			t4 = space();
			td1 = element("td");
			t5 = text(t5_value);
			t6 = space();
			td2 = element("td");
			t7 = text(t7_value);
			t8 = space();
			if_block.c();
			t9 = space();
			td3 = element("td");
			a1 = element("a");
			t10 = text("View");
			t11 = space();
			td4 = element("td");
			a2 = element("a");
			t12 = text("View");
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			a0 = claim_element(td0_nodes, "A", { href: true, target: true, class: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, t0_value);
			t1 = claim_text(a0_nodes, "[");
			t2 = claim_text(a0_nodes, t2_value);
			t3 = claim_text(a0_nodes, "]");
			a0_nodes.forEach(detach_dev);
			td0_nodes.forEach(detach_dev);
			t4 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", {});
			var td1_nodes = children(td1);
			t5 = claim_text(td1_nodes, t5_value);
			td1_nodes.forEach(detach_dev);
			t6 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", {});
			var td2_nodes = children(td2);
			t7 = claim_text(td2_nodes, t7_value);
			td2_nodes.forEach(detach_dev);
			t8 = claim_space(tr_nodes);
			if_block.l(tr_nodes);
			t9 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			a1 = claim_element(td3_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t10 = claim_text(a1_nodes, "View");
			a1_nodes.forEach(detach_dev);
			td3_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			a2 = claim_element(td4_nodes, "A", { href: true, class: true });
			var a2_nodes = children(a2);
			t12 = claim_text(a2_nodes, "View");
			a2_nodes.forEach(detach_dev);
			td4_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "href", a0_href_value = "/converter/" + /*item*/ ctx[7].id);
			attr_dev(a0, "target", "_blank");
			attr_dev(a0, "class", "svelte-16wadjs");
			add_location(a0, file, 105, 12, 2237);
			attr_dev(td0, "class", "svelte-16wadjs");
			add_location(td0, file, 105, 8, 2233);
			add_location(td1, file, 108, 8, 2452);
			add_location(td2, file, 109, 8, 2531);
			attr_dev(a1, "href", a1_href_value = "/tickets/" + /*item*/ ctx[7].id);
			attr_dev(a1, "class", "svelte-16wadjs");
			add_location(a1, file, 116, 27, 2820);
			attr_dev(td3, "class", "center svelte-16wadjs");
			add_location(td3, file, 116, 8, 2801);
			attr_dev(a2, "href", a2_href_value = "/history/" + /*item*/ ctx[7].id);
			attr_dev(a2, "class", "svelte-16wadjs");
			add_location(a2, file, 117, 27, 2939);
			attr_dev(td4, "class", "center svelte-16wadjs");
			add_location(td4, file, 117, 8, 2920);
			add_location(tr, file, 104, 7, 2219);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, tr, anchor);
			append_hydration_dev(tr, td0);
			append_hydration_dev(td0, a0);
			append_hydration_dev(a0, t0);
			append_hydration_dev(a0, t1);
			append_hydration_dev(a0, t2);
			append_hydration_dev(a0, t3);
			append_hydration_dev(tr, t4);
			append_hydration_dev(tr, td1);
			append_hydration_dev(td1, t5);
			append_hydration_dev(tr, t6);
			append_hydration_dev(tr, td2);
			append_hydration_dev(td2, t7);
			append_hydration_dev(tr, t8);
			if_block.m(tr, null);
			append_hydration_dev(tr, t9);
			append_hydration_dev(tr, td3);
			append_hydration_dev(td3, a1);
			append_hydration_dev(a1, t10);
			append_hydration_dev(tr, t11);
			append_hydration_dev(tr, td4);
			append_hydration_dev(td4, a2);
			append_hydration_dev(a2, t12);
			append_hydration_dev(tr, t13);

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", click_handler, false, false, false),
					listen_dev(a1, "click", click_handler_1, false, false, false),
					listen_dev(a2, "click", click_handler_2, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*posts*/ 1 && t0_value !== (t0_value = (!!/*item*/ ctx[7].name ? /*item*/ ctx[7].name : '') + "")) set_data_dev(t0, t0_value);

			if (dirty & /*posts*/ 1 && t2_value !== (t2_value = (!!/*item*/ ctx[7].serial_number
			? /*item*/ ctx[7].serial_number
			: '') + "")) set_data_dev(t2, t2_value);

			if (dirty & /*posts*/ 1 && a0_href_value !== (a0_href_value = "/converter/" + /*item*/ ctx[7].id)) {
				attr_dev(a0, "href", a0_href_value);
			}

			if (dirty & /*posts*/ 1 && t5_value !== (t5_value = (!!/*item*/ ctx[7].expected_throughput
			? /*item*/ ctx[7].expected_throughput
			: '') + "")) set_data_dev(t5, t5_value);

			if (dirty & /*posts*/ 1 && t7_value !== (t7_value = (!!/*item*/ ctx[7].vendor ? /*item*/ ctx[7].vendor : '') + "")) set_data_dev(t7, t7_value);

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(tr, t9);
				}
			}

			if (dirty & /*posts*/ 1 && a1_href_value !== (a1_href_value = "/tickets/" + /*item*/ ctx[7].id)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (dirty & /*posts*/ 1 && a2_href_value !== (a2_href_value = "/history/" + /*item*/ ctx[7].id)) {
				attr_dev(a2, "href", a2_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(104:6) {#each posts as item}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div6;
	let div2;
	let div0;
	let h2;
	let t1;
	let t2;
	let div1;
	let t3;
	let div5;
	let div4;
	let div3;
	let table;
	let thead;
	let tr;
	let th0;
	let t4;
	let t5;
	let th1;
	let t6;
	let t7;
	let th2;
	let t8;
	let t9;
	let th3;
	let t10;
	let t11;
	let th4;
	let t12;
	let t13;
	let th5;
	let t14;
	let t15;
	let tbody;
	let each_value = /*posts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			div6 = element("div");
			div2 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t1 = text(/*currentCustomerName*/ ctx[1]);
			t2 = space();
			div1 = element("div");
			t3 = space();
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th0 = element("th");
			t4 = text("Name");
			t5 = space();
			th1 = element("th");
			t6 = text("Expected Throughput");
			t7 = space();
			th2 = element("th");
			t8 = text("Vendor");
			t9 = space();
			th3 = element("th");
			t10 = text("Active");
			t11 = space();
			th4 = element("th");
			t12 = text("Tickets");
			t13 = space();
			th5 = element("th");
			t14 = text("Logs");
			t15 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = head_selector('svelte-1nqrlpn', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div2 = claim_element(div6_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, /*currentCustomerName*/ ctx[1]);
			h2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { style: true, class: true });
			children(div1).forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t3 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			table = claim_element(div3_nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			thead = claim_element(table_nodes, "THEAD", {});
			var thead_nodes = children(thead);
			tr = claim_element(thead_nodes, "TR", {});
			var tr_nodes = children(tr);
			th0 = claim_element(tr_nodes, "TH", {});
			var th0_nodes = children(th0);
			t4 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			th1 = claim_element(tr_nodes, "TH", {});
			var th1_nodes = children(th1);
			t6 = claim_text(th1_nodes, "Expected Throughput");
			th1_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			th2 = claim_element(tr_nodes, "TH", {});
			var th2_nodes = children(th2);
			t8 = claim_text(th2_nodes, "Vendor");
			th2_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			th3 = claim_element(tr_nodes, "TH", { class: true });
			var th3_nodes = children(th3);
			t10 = claim_text(th3_nodes, "Active");
			th3_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			th4 = claim_element(tr_nodes, "TH", { class: true });
			var th4_nodes = children(th4);
			t12 = claim_text(th4_nodes, "Tickets");
			th4_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			th5 = claim_element(tr_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t14 = claim_text(th5_nodes, "Logs");
			th5_nodes.forEach(detach_dev);
			tr_nodes.forEach(detach_dev);
			thead_nodes.forEach(detach_dev);
			t15 = claim_space(table_nodes);
			tbody = claim_element(table_nodes, "TBODY", {});
			var tbody_nodes = children(tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			tbody_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Converters | ProfitFLow";
			add_location(h2, file, 82, 3, 1710);
			attr_dev(div0, "class", "svelte-16wadjs");
			add_location(div0, file, 81, 2, 1700);
			set_style(div1, "flex-grow", "1");
			attr_dev(div1, "class", "svelte-16wadjs");
			add_location(div1, file, 85, 2, 1756);
			attr_dev(div2, "class", "search-bar container svelte-16wadjs");
			add_location(div2, file, 80, 1, 1662);
			add_location(th0, file, 94, 6, 1955);
			add_location(th1, file, 95, 6, 1976);
			add_location(th2, file, 96, 6, 2012);
			attr_dev(th3, "class", "center svelte-16wadjs");
			add_location(th3, file, 97, 6, 2035);
			attr_dev(th4, "class", "center svelte-16wadjs");
			add_location(th4, file, 98, 6, 2073);
			attr_dev(th5, "class", "center svelte-16wadjs");
			add_location(th5, file, 99, 6, 2112);
			add_location(tr, file, 93, 5, 1943);
			add_location(thead, file, 92, 5, 1929);
			add_location(tbody, file, 102, 5, 2174);
			attr_dev(table, "class", "table");
			add_location(table, file, 91, 4, 1901);
			attr_dev(div3, "class", "col-md-12 converter-list");
			add_location(div3, file, 90, 3, 1857);
			attr_dev(div4, "class", "row");
			add_location(div4, file, 89, 2, 1835);
			attr_dev(div5, "class", "container page svelte-16wadjs");
			add_location(div5, file, 88, 1, 1803);
			attr_dev(div6, "class", "home-page svelte-16wadjs");
			add_location(div6, file, 79, 0, 1636);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div6, anchor);
			append_hydration_dev(div6, div2);
			append_hydration_dev(div2, div0);
			append_hydration_dev(div0, h2);
			append_hydration_dev(h2, t1);
			append_hydration_dev(div2, t2);
			append_hydration_dev(div2, div1);
			append_hydration_dev(div6, t3);
			append_hydration_dev(div6, div5);
			append_hydration_dev(div5, div4);
			append_hydration_dev(div4, div3);
			append_hydration_dev(div3, table);
			append_hydration_dev(table, thead);
			append_hydration_dev(thead, tr);
			append_hydration_dev(tr, th0);
			append_hydration_dev(th0, t4);
			append_hydration_dev(tr, t5);
			append_hydration_dev(tr, th1);
			append_hydration_dev(th1, t6);
			append_hydration_dev(tr, t7);
			append_hydration_dev(tr, th2);
			append_hydration_dev(th2, t8);
			append_hydration_dev(tr, t9);
			append_hydration_dev(tr, th3);
			append_hydration_dev(th3, t10);
			append_hydration_dev(tr, t11);
			append_hydration_dev(tr, th4);
			append_hydration_dev(th4, t12);
			append_hydration_dev(tr, t13);
			append_hydration_dev(tr, th5);
			append_hydration_dev(th5, t14);
			append_hydration_dev(table, t15);
			append_hydration_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*currentCustomerName*/ 2) set_data_dev(t1, /*currentCustomerName*/ ctx[1]);

			if (dirty & /*posts, setCurrentConverter*/ 1) {
				each_value = /*posts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div6);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	// the `slug` parameter is available because
	// this file is called [slug].svelte
	const res = await this.fetch(`/gadmin/customers/${page.params.id}.json`);

	const data = await res.json();

	if (res.status === 200) {
		return { posts: data };
	} else {
		this.error(res.status, data.message);
	}
}

function setCurrentConverter(name) {
	localStorage.setItem('currentConverter', name);
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('U5Bidu5D', slots, []);
	let { posts } = $$props;
	let selectedConverter = 0;
	let errors = [];
	let currentCustomerName = '';

	onMount(() => {
		$$invalidate(1, currentCustomerName = localStorage.getItem('currentCustomerName'));
	});

	$$self.$$.on_mount.push(function () {
		if (posts === undefined && !('posts' in $$props || $$self.$$.bound[$$self.$$.props['posts']])) {
			console.warn("<U5Bidu5D> was created without expected prop 'posts'");
		}
	});

	const writable_props = ['posts'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
	});

	const click_handler = item => setCurrentConverter(item.name);
	const click_handler_1 = item => setCurrentConverter(item.name);
	const click_handler_2 = item => setCurrentConverter(item.name);

	$$self.$$set = $$props => {
		if ('posts' in $$props) $$invalidate(0, posts = $$props.posts);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		posts,
		selectedConverter,
		errors,
		currentCustomerName,
		setCurrentConverter
	});

	$$self.$inject_state = $$props => {
		if ('posts' in $$props) $$invalidate(0, posts = $$props.posts);
		if ('selectedConverter' in $$props) selectedConverter = $$props.selectedConverter;
		if ('errors' in $$props) errors = $$props.errors;
		if ('currentCustomerName' in $$props) $$invalidate(1, currentCustomerName = $$props.currentCustomerName);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts, currentCustomerName, click_handler, click_handler_1, click_handler_2];
}

class U5Bidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bidu5D",
			options,
			id: create_fragment.name
		});
	}

	get posts() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { U5Bidu5D as default, preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
